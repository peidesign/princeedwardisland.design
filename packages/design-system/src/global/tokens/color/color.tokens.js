const chroma = require("chroma-js");
const colorable = require("colorable"); // Todo: have fxn to document accessibility

/**
 * Color tokens
 *
 * Color tokens are autogenerated from a set of base colors, in a scale from 0-10,
 * with 10 being the lightest and 10 being the darkest.
 *
 * Accessibility and accessible color combination information is auto-generated using
 * colorable and embedded in the token comments.
 */
const colorableOptions = {
  compact: false,
  threshold: 0,
  uniq: true
};

const colors = [
  {
    name: "purple",
    value: "rgb(143,130,216)"
  },
  {
    name: "dark",
    value: "rgb(20,13,64)"
  },
  {
    name: "light",
    value: "rgb(255,255,255)"
  },
  {
    name: "transparent",
    value: "transparent"
  }
];

function generateScale(color) {
  // We don't want a scale for transparent
  if (color.value === "transparent") return color;

  const base = chroma(color.value);
  const start = chroma(color.value).brighten(2);
  const end = chroma(color.value).darken(2);
  const scale = chroma
    .scale([start.rgb(), base.rgb(), end.rgb()])
    .correctLightness()
    .mode("lch")
    .colors(10);

  return scale.map((step, index) => {
    // TODO: generate comment from accessibility data
    //       and/or remove/fix unaccessible generations
    const accessibilityForColor = getAccessibilityForColor(step);

    return {
      name: `${color.name}-${index}`,
      value: step
    };
  });
}

function getAccessibilityForColor(color) {
  let results = {};

  results.contrastWhite = chroma.contrast(color, "#FFFFFF");
  results.contrastBlack = chroma.contrast(color, "#000000");
  results.temperature = chroma.temperature(color);
  results.luminance = chroma.luminance(color);

  return results;
}

function getAccessbilityForColors(colors) {
  let colorsObj = {};
  let results;

  colors.forEach(color => (colorsObj[color.name] = color.value));

  results = colorable(colorsObj, colorableOptions);

  return results;
}

module.exports = {
  props: [].concat.apply([], colors.map(color => generateScale(color))),
  global: {
    category: "color",
    type: "color"
  }
};
